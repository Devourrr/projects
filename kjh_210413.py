'''파이썬 300제'''
# 튜플생성
my_variable = ()
print(type(my_variable)) # <class 'tuple'>

movie_rank = ("닥터 스트레인지", "스플릿", "럭키")

my_tuple = (1) # 괄호와 함께 하나의 정숫값을 저장하면 튜플이 정의 될 것같지만 그렇지 않습니다.
print(type(my_tuple)) # 파이썬은 튜플이 아닌 정수로 인식합니다.
# 하나의 데이터가 저장되는 경우, 아래와 같이 쉼표를 입력해만 합니다.
my_tuple = (1, )
print(my_tuple)

# t = (1, 2, 3)
# t[0] = 'a' tuple은 원소(element)의 값을 변경할 수 없습니다.

t = 1, 2, 3, 4 # t가 바인딩하는 데이터 타입은 무엇인가? 
# => 원칙적으로 튜플은 괄호와 함께 데이터를 정의해야 하지만, 사용자 편의를 위해 괄호 없이도 동작하므로 튜플

t = ('a', 'b', 'c') # 튜플의 값은 변경할 수 없기 때문에, 리스트와 달리 아래 코드는 동작하지 않습니다.
t = ('A', 'b', 'c') # 새로운 튜플을 만들고 t 라는 변수를 업데이트 해야 합니다. 기존의 튜플 ('a', 'b', 'c')은 자동으로 삭제됩니다.
print(t)

interest = ('삼성전자', 'LG전자', 'SK Hynix') 
data = list(interest) #튜플 리스트로 변환
print(data)

temp = ('apple', 'banana', 'cake')
a, b, c = temp
print(a, b, c)

# 1 부터 99까지의 정수 중 짝수만 저장된 튜플을 생성
data = tuple(range(2, 100, 2))  # 튜플 range짝수
print(data)

print('=============='*20)
scores = [8.8, 8.9, 8.7, 9.2, 9.3, 9.7, 9.9, 9.5, 7.8, 9.4]
*valid_score, _, _= scores
print(valid_score)
#  star expression을 사용하면 변수의 개수가 달라도 데이터 언패킹을 할 수 있습니다.
# 튜플에 저장된 데이터 중에서 앞에 있는 두 개의 데이터만 필요할 경우 나머지 데이터의 언패킹 코드를 작성할 필요가 없습니다.
a,b,*c = (0, 1, 2, 3, 4, 5)
print(a)
print(b)
print(c)

scores = [8.8, 8.9, 8.7, 9.2, 9.3, 9.7, 9.9, 9.5, 7.8, 9.4]
a,b,*valid_score = scores
print(valid_score) # 별 표현식


# 비어있는 딕셔너리
temp = { } 

ice = { "메로나":1000, "폴라포":1200, "빵빠레":1800}
print(ice) # 딕셔너리 구성
ice["죠스바"]=1400
ice ["월드콘"]=1600
print(ice) # 딕셔너리 추가

ice = {'메로나': 1000,
       '폴로포': 1200,
       '빵빠레': 1800,
       '죠스바': 1200,
       '월드콘': 1500}

print("메로나 가격:", ice["메로나"]) # 딕셔너리 인덱스 획득

ice = {'메로나': 1000,
       '폴로포': 1200,
       '빵빠레': 1800,
       '죠스바': 1200,
       '월드콘': 1500}
ice["메로나"] = 1300
print(ice["메로나"]) # 딕셔너리 인덱스 변경

ice = {'메로나': 1000,
       '폴로포': 1200,
       '빵빠레': 1800,
       '죠스바': 1200,
       '월드콘': 1500}
del ice["메로나"]    # 딕셔너리 인덱스 삭제
print(ice)


# icecream = {'폴라포': 1200, '빵빠레': 1800, '월드콘': 1500, '메로나': 1000}
# icecream['누가바']
# 없는 키를 인덱싱해서 에러

inventory = {"메로나": ["가격:300,재고:20"],
            "비비빅": ["가격:400,재고:3"],
            "죠스바": ["가격:250,재고:100"]}
print(inventory) # 딕셔너리 생성

inventory = {"메로나": [300, 20],
              "비비빅": [400, 3],
              "죠스바": [250, 100]}
print(inventory["메로나"][0],"원") # 딕셔너리 인덱싱
print(inventory["메로나"][1],"개") # 딕셔너리 인덱싱
inventory["월드콘"]=[500,7]
print(inventory)

